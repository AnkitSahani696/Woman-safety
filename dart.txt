import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:speech_to_text/speech_to_text.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:geolocator/geolocator.dart';
import 'package:url_launcher/url_launcher.dart';
import 'dart:async';
import 'dart:math';

void main() {
  runApp(SafetyApp());
}

class SafetyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'SafeWoman',
      theme: ThemeData(
        primarySwatch: Colors.pink,
        visualDensity: VisualDensity.adaptivePlatformDensity,
        fontFamily: 'Roboto',
      ),
      home: HomeScreen(),
      debugShowCheckedModeBanner: false,
    );
  }
}

class HomeScreen extends StatefulWidget {
  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> with TickerProviderStateMixin {
  int _currentIndex = 0;
  late AnimationController _pulseController;
  late Animation<double> _pulseAnimation;
  bool _isListening = false;
  SpeechToText _speechToText = SpeechToText();
  Timer? _hotwordTimer;

  final List<String> _hotwords = ['help', 'emergency', 'danger', 'sos'];

  @override
  void initState() {
    super.initState();
    _initializeSpeech();
    _pulseController = AnimationController(
      duration: Duration(seconds: 2),
      vsync: this,
    );
    _pulseAnimation = Tween<double>(begin: 1.0, end: 1.2).animate(
      CurvedAnimation(parent: _pulseController, curve: Curves.easeInOut),
    );
    _pulseController.repeat(reverse: true);
    _startHotwordDetection();
  }

  void _initializeSpeech() async {
    await _speechToText.initialize();
  }

  void _startHotwordDetection() {
    _hotwordTimer = Timer.periodic(Duration(seconds: 3), (timer) {
      if (!_isListening) {
        _listenForHotwords();
      }
    });
  }

  void _listenForHotwords() async {
    if (await _speechToText.hasPermission) {
      setState(() => _isListening = true);
      _speechToText.listen(
        onResult: (result) {
          String words = result.recognizedWords.toLowerCase();
          for (String hotword in _hotwords) {
            if (words.contains(hotword)) {
              _triggerSOS();
              break;
            }
          }
        },
        listenFor: Duration(seconds: 2),
        pauseFor: Duration(seconds: 1),
      );

      Timer(Duration(seconds: 2), () {
        setState(() => _isListening = false);
      });
    }
  }

  void _triggerSOS() {
    HapticFeedback.vibrate();
    _showSOSDialog();
  }

  void _showSOSDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Emergency Detected!'),
        content: Text('Hotword detected. Do you need help?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('Cancel'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              _sendSOSAlert();
            },
            child: Text('Send SOS'),
            style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
          ),
        ],
      ),
    );
  }

  @override
  void dispose() {
    _pulseController.dispose();
    _hotwordTimer?.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: IndexedStack(
        index: _currentIndex,
        children: [
          SOSScreen(pulseAnimation: _pulseAnimation),
          SafeMapScreen(),
          ChatbotScreen(),
          ProfileScreen(),
        ],
      ),
      bottomNavigationBar: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [Colors.pink.shade400, Colors.purple.shade400],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
        ),
        child: BottomNavigationBar(
          currentIndex: _currentIndex,
          onTap: (index) => setState(() => _currentIndex = index),
          type: BottomNavigationBarType.fixed,
          backgroundColor: Colors.transparent,
          selectedItemColor: Colors.white,
          unselectedItemColor: Colors.white70,
          elevation: 0,
          items: [
            BottomNavigationBarItem(icon: Icon(Icons.warning), label: 'SOS'),
            BottomNavigationBarItem(icon: Icon(Icons.map), label: 'Safe Map'),
            BottomNavigationBarItem(icon: Icon(Icons.chat), label: 'Chat'),
            BottomNavigationBarItem(icon: Icon(Icons.person), label: 'Profile'),
          ],
        ),
      ),
      floatingActionButton: _isListening
          ? FloatingActionButton(
        onPressed: null,
        backgroundColor: Colors.red,
        child: Icon(Icons.mic, color: Colors.white),
      )
          : null,
    );
  }

  void _sendSOSAlert() async {
    Position position = await Geolocator.getCurrentPosition();
    String message = 'EMERGENCY! I need help. My location: https://maps.google.com/?q=${position.latitude},${position.longitude}';

    // Launch SMS
    Uri smsUri = Uri(
      scheme: 'sms',
      path: '911',
      queryParameters: {'body': message},
    );

    if (await canLaunchUrl(smsUri)) {
      await launchUrl(smsUri);
    }
  }
}

class SOSScreen extends StatefulWidget {
  final Animation<double> pulseAnimation;

  SOSScreen({required this.pulseAnimation});

  @override
  _SOSScreenState createState() => _SOSScreenState();
}

class _SOSScreenState extends State<SOSScreen> {
  bool _sosActivated = false;
  Timer? _sosTimer;
  int _countdown = 10;

  void _activateSOS() {
    setState(() => _sosActivated = true);
    _sosTimer = Timer.periodic(Duration(seconds: 1), (timer) {
      setState(() => _countdown--);
      if (_countdown <= 0) {
        _sendSOS();
        timer.cancel();
      }
    });
  }

  void _cancelSOS() {
    setState(() {
      _sosActivated = false;
      _countdown = 10;
    });
    _sosTimer?.cancel();
  }

  void _sendSOS() async {
    Position position = await Geolocator.getCurrentPosition();
    String message = 'EMERGENCY ALERT! I am in danger. Location: ${position.latitude}, ${position.longitude}';

    // Here you would implement actual SOS functionality
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('SOS Alert Sent!'), backgroundColor: Colors.red),
    );

    setState(() {
      _sosActivated = false;
      _countdown = 10;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [Colors.pink.shade100, Colors.purple.shade100],
          begin: Alignment.topCenter,
          end: Alignment.bottomCenter,
        ),
      ),
      child: SafeArea(
        child: Column(
          children: [
            Container(
              padding: EdgeInsets.all(20),
              child: Text(
                'SafeWoman',
                style: TextStyle(
                  fontSize: 32,
                  fontWeight: FontWeight.bold,
                  color: Colors.purple.shade700,
                ),
              ),
            ),
            Expanded(
              child: Center(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    if (!_sosActivated) ...[
                      Text(
                        'Emergency SOS',
                        style: TextStyle(
                          fontSize: 24,
                          fontWeight: FontWeight.bold,
                          color: Colors.purple.shade700,
                        ),
                      ),
                      SizedBox(height: 20),
                      Text(
                        'Press and hold the button below\nfor 3 seconds to activate SOS',
                        textAlign: TextAlign.center,
                        style: TextStyle(
                          fontSize: 16,
                          color: Colors.grey.shade700,
                        ),
                      ),
                      SizedBox(height: 50),
                      AnimatedBuilder(
                        animation: widget.pulseAnimation,
                        builder: (context, child) {
                          return Transform.scale(
                            scale: widget.pulseAnimation.value,
                            child: GestureDetector(
                              onLongPress: _activateSOS,
                              child: Container(
                                width: 200,
                                height: 200,
                                decoration: BoxDecoration(
                                  shape: BoxShape.circle,
                                  gradient: RadialGradient(
                                    colors: [Colors.red.shade400, Colors.red.shade700],
                                  ),
                                  boxShadow: [
                                    BoxShadow(
                                      color: Colors.red.withOpacity(0.3),
                                      blurRadius: 20,
                                      spreadRadius: 5,
                                    ),
                                  ],
                                ),
                                child: Center(
                                  child: Text(
                                    'SOS',
                                    style: TextStyle(
                                      fontSize: 36,
                                      fontWeight: FontWeight.bold,
                                      color: Colors.white,
                                    ),
                                  ),
                                ),
                              ),
                            ),
                          );
                        },
                      ),
                    ] else ...[
                      Text(
                        'SOS ACTIVATED',
                        style: TextStyle(
                          fontSize: 28,
                          fontWeight: FontWeight.bold,
                          color: Colors.red,
                        ),
                      ),
                      SizedBox(height: 20),
                      Text(
                        'Sending alert in $_countdown seconds',
                        style: TextStyle(fontSize: 18, color: Colors.red.shade700),
                      ),
                      SizedBox(height: 40),
                      Container(
                        width: 100,
                        height: 100,
                        decoration: BoxDecoration(
                          shape: BoxShape.circle,
                          color: Colors.red,
                        ),
                        child: Center(
                          child: Text(
                            '$_countdown',
                            style: TextStyle(
                              fontSize: 36,
                              fontWeight: FontWeight.bold,
                              color: Colors.white,
                            ),
                          ),
                        ),
                      ),
                      SizedBox(height: 40),
                      ElevatedButton(
                        onPressed: _cancelSOS,
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.grey,
                          padding: EdgeInsets.symmetric(horizontal: 40, vertical: 15),
                        ),
                        child: Text('CANCEL', style: TextStyle(fontSize: 18)),
                      ),
                    ],
                  ],
                ),
              ),
            ),
            Container(
              padding: EdgeInsets.all(20),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                children: [
                  _buildQuickActionButton(Icons.phone, 'Call 911', () => _callEmergency()),
                  _buildQuickActionButton(Icons.location_on, 'Share Location', () => _shareLocation()),
                  _buildQuickActionButton(Icons.contacts, 'Alert Contacts', () => _alertContacts()),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildQuickActionButton(IconData icon, String label, VoidCallback onTap) {
    return GestureDetector(
      onTap: onTap,
      child: Container(
        padding: EdgeInsets.all(15),
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(15),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.1),
              blurRadius: 10,
              offset: Offset(0, 5),
            ),
          ],
        ),
        child: Column(
          children: [
            Icon(icon, size: 30, color: Colors.purple.shade600),
            SizedBox(height: 5),
            Text(
              label,
              style: TextStyle(fontSize: 12, fontWeight: FontWeight.w600),
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ),
    );
  }

  void _callEmergency() async {
    Uri phoneUri = Uri(scheme: 'tel', path: '911');
    if (await canLaunchUrl(phoneUri)) {
      await launchUrl(phoneUri);
    }
  }

  void _shareLocation() async {
    Position position = await Geolocator.getCurrentPosition();
    String message = 'My current location: https://maps.google.com/?q=${position.latitude},${position.longitude}';

    Uri smsUri = Uri(
      scheme: 'sms',
      queryParameters: {'body': message},
    );

    if (await canLaunchUrl(smsUri)) {
      await launchUrl(smsUri);
    }
  }

  void _alertContacts() {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Emergency contacts have been notified')),
    );
  }
}

class SafeMapScreen extends StatelessWidget {
  final List<Map<String, dynamic>> _safeSpots = [
    {'name': 'Police Station', 'distance': '0.5 km', 'type': 'police'},
    {'name': 'Hospital', 'distance': '1.2 km', 'type': 'hospital'},
    {'name': 'Fire Station', 'distance': '0.8 km', 'type': 'fire'},
    {'name': 'Safe House', 'distance': '2.1 km', 'type': 'safe'},
  ];

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [Colors.blue.shade50, Colors.green.shade50],
          begin: Alignment.topCenter,
          end: Alignment.bottomCenter,
        ),
      ),
      child: SafeArea(
        child: Column(
          children: [
            Container(
              padding: EdgeInsets.all(20),
              child: Row(
                children: [
                  Icon(Icons.map, size: 30, color: Colors.blue.shade700),
                  SizedBox(width: 10),
                  Text(
                    'Safe Map',
                    style: TextStyle(
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                      color: Colors.blue.shade700,
                    ),
                  ),
                ],
              ),
            ),
            Container(
              margin: EdgeInsets.symmetric(horizontal: 20),
              height: 200,
              decoration: BoxDecoration(
                color: Colors.grey.shade200,
                borderRadius: BorderRadius.circular(15),
                border: Border.all(color: Colors.grey.shade400),
              ),
              child: Center(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Icon(Icons.map, size: 50, color: Colors.grey.shade600),
                    Text(
                      'Interactive Map View',
                      style: TextStyle(
                        fontSize: 16,
                        color: Colors.grey.shade600,
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                    SizedBox(height: 10),
                    Text(
                      'Your location and nearby safe spots',
                      style: TextStyle(
                        fontSize: 12,
                        color: Colors.grey.shade500,
                      ),
                    ),
                  ],
                ),
              ),
            ),
            SizedBox(height: 20),
            Container(
              padding: EdgeInsets.symmetric(horizontal: 20),
              child: Row(
                children: [
                  Icon(Icons.location_on, color: Colors.red),
                  SizedBox(width: 10),
                  Text(
                    'Nearby Safe Spots',
                    style: TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                      color: Colors.grey.shade800,
                    ),
                  ),
                ],
              ),
            ),
            SizedBox(height: 10),
            Expanded(
              child: ListView.builder(
                padding: EdgeInsets.symmetric(horizontal: 20),
                itemCount: _safeSpots.length,
                itemBuilder: (context, index) {
                  return _buildSafeSpotCard(_safeSpots[index]);
                },
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildSafeSpotCard(Map<String, dynamic> spot) {
    IconData icon;
    Color color;

    switch (spot['type']) {
      case 'police':
        icon = Icons.local_police;
        color = Colors.blue;
        break;
      case 'hospital':
        icon = Icons.local_hospital;
        color = Colors.red;
        break;
      case 'fire':
        icon = Icons.fire_truck;
        color = Colors.orange;
        break;
      default:
        icon = Icons.home;
        color = Colors.green;
    }

    return Container(
      margin: EdgeInsets.only(bottom: 10),
      padding: EdgeInsets.all(15),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(15),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 5,
            offset: Offset(0, 2),
          ),
        ],
      ),
      child: Row(
        children: [
          Container(
            padding: EdgeInsets.all(10),
            decoration: BoxDecoration(
              color: color.withOpacity(0.1),
              borderRadius: BorderRadius.circular(10),
            ),
            child: Icon(icon, color: color, size: 25),
          ),
          SizedBox(width: 15),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  spot['name'],
                  style: TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                    color: Colors.grey.shade800,
                  ),
                ),
                Text(
                  spot['distance'],
                  style: TextStyle(
                    fontSize: 14,
                    color: Colors.grey.shade600,
                  ),
                ),
              ],
            ),
          ),
          Row(
            children: [
              IconButton(
                onPressed: () {},
                icon: Icon(Icons.directions, color: Colors.blue),
              ),
              IconButton(
                onPressed: () {},
                icon: Icon(Icons.phone, color: Colors.green),
              ),
            ],
          ),
        ],
      ),
    );
  }
}

class ChatbotScreen extends StatefulWidget {
  @override
  _ChatbotScreenState createState() => _ChatbotScreenState();
}

class _ChatbotScreenState extends State<ChatbotScreen> {
  List<ChatMessage> _messages = [];
  TextEditingController _textController = TextEditingController();

  @override
  void initState() {
    super.initState();
    _messages.add(ChatMessage(
      text: "Hi! I'm SafeBot, your personal safety assistant. How can I help you today?",
      isUser: false,
    ));
  }

  void _handleSubmitted(String text) {
    _textController.clear();
    setState(() {
      _messages.add(ChatMessage(text: text, isUser: true));
    });

    // Simulate bot response
    Timer(Duration(seconds: 1), () {
      setState(() {
        _messages.add(ChatMessage(
          text: _getBotResponse(text),
          isUser: false,
        ));
      });
    });
  }

  String _getBotResponse(String userMessage) {
    String message = userMessage.toLowerCase();

    if (message.contains('emergency') || message.contains('help') || message.contains('danger')) {
      return "I understand you're in a concerning situation. Would you like me to help you contact emergency services or share your location with trusted contacts?";
    } else if (message.contains('safe') || message.contains('safety')) {
      return "Here are some safety tips: Stay aware of your surroundings, trust your instincts, keep emergency contacts handy, and don't hesitate to seek help when needed.";
    } else if (message.contains('location')) {
      return "I can help you share your location with trusted contacts or find nearby safe places like police stations, hospitals, or well-lit public areas.";
    } else if (message.contains('contact')) {
      return "You can set up emergency contacts in your profile. In case of emergency, these contacts will be notified automatically with your location.";
    } else {
      return "I'm here to help with safety-related questions and concerns. You can ask me about emergency procedures, safety tips, or how to use the app features.";
    }
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [Colors.purple.shade50, Colors.pink.shade50],
          begin: Alignment.topCenter,
          end: Alignment.bottomCenter,
        ),
      ),
      child: SafeArea(
        child: Column(
          children: [
            Container(
              padding: EdgeInsets.all(20),
              child: Row(
                children: [
                  Container(
                    padding: EdgeInsets.all(10),
                    decoration: BoxDecoration(
                      color: Colors.purple.shade100,
                      borderRadius: BorderRadius.circular(25),
                    ),
                    child: Icon(Icons.smart_toy, color: Colors.purple.shade700, size: 25),
                  ),
                  SizedBox(width: 10),
                  Text(
                    'SafeBot Assistant',
                    style: TextStyle(
                      fontSize: 20,
                      fontWeight: FontWeight.bold,
                      color: Colors.purple.shade700,
                    ),
                  ),
                ],
              ),
            ),
            Expanded(
              child: ListView.builder(
                padding: EdgeInsets.symmetric(horizontal: 20),
                itemCount: _messages.length,
                itemBuilder: (context, index) {
                  return _buildMessage(_messages[index]);
                },
              ),
            ),
            Container(
              padding: EdgeInsets.all(20),
              child: Row(
                children: [
                  Expanded(
                    child: Container(
                      decoration: BoxDecoration(
                        color: Colors.white,
                        borderRadius: BorderRadius.circular(25),
                        boxShadow: [
                          BoxShadow(
                            color: Colors.black.withOpacity(0.1),
                            blurRadius: 5,
                            offset: Offset(0, 2),
                          ),
                        ],
                      ),
                      child: TextField(
                        controller: _textController,
                        decoration: InputDecoration(
                          hintText: 'Type your message...',
                          border: InputBorder.none,
                          contentPadding: EdgeInsets.symmetric(horizontal: 20, vertical: 15),
                        ),
                        onSubmitted: _handleSubmitted,
                      ),
                    ),
                  ),
                  SizedBox(width: 10),
                  Container(
                    decoration: BoxDecoration(
                      gradient: LinearGradient(
                        colors: [Colors.purple.shade400, Colors.pink.shade400],
                      ),
                      borderRadius: BorderRadius.circular(25),
                    ),
                    child: IconButton(
                      onPressed: () => _handleSubmitted(_textController.text),
                      icon: Icon(Icons.send, color: Colors.white),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildMessage(ChatMessage message) {
    return Container(
      margin: EdgeInsets.only(bottom: 15),
      child: Row(
        mainAxisAlignment: message.isUser ? MainAxisAlignment.end : MainAxisAlignment.start,
        children: [
          if (!message.isUser) ...[
            Container(
              padding: EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: Colors.purple.shade100,
                borderRadius: BorderRadius.circular(20),
              ),
              child: Icon(Icons.smart_toy, size: 20, color: Colors.purple.shade700),
            ),
            SizedBox(width: 10),
          ],
          Flexible(
            child: Container(
              padding: EdgeInsets.all(15),
              decoration: BoxDecoration(
                color: message.isUser ? Colors.purple.shade500 : Colors.white,
                borderRadius: BorderRadius.circular(20),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.1),
                    blurRadius: 5,
                    offset: Offset(0, 2),
                  ),
                ],
              ),
              child: Text(
                message.text,
                style: TextStyle(
                  color: message.isUser ? Colors.white : Colors.grey.shade800,
                  fontSize: 16,
                ),
              ),
            ),
          ),
          if (message.isUser) ...[
            SizedBox(width: 10),
            Container(
              padding: EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: Colors.pink.shade100,
                borderRadius: BorderRadius.circular(20),
              ),
              child: Icon(Icons.person, size: 20, color: Colors.pink.shade700),
            ),
          ],
        ],
      ),
    );
  }
}

class ChatMessage {
  String text;
  bool isUser;

  ChatMessage({required this.text, required this.isUser});
}

class ProfileScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [Colors.orange.shade50, Colors.red.shade50],
          begin: Alignment.topCenter,
          end: Alignment.bottomCenter,
        ),
      ),
      child: SafeArea(
        child: SingleChildScrollView(
          padding: EdgeInsets.all(20),
          child: Column(
            children: [
              Container(
                padding: EdgeInsets.all(20),
                child: Column(
                  children: [
                    Container(
                      width: 100,
                      height: 100,
                      decoration: BoxDecoration(
                        shape: BoxShape.circle,
                        gradient: LinearGradient(
                          colors: [Colors.orange.shade400, Colors.red.shade400],
                        ),
                      ),
                      child: Icon(Icons.person, size: 50, color: Colors.white),
                    ),
                    SizedBox(height: 15),
                    Text(
                      'Sarah Johnson',
                      style: TextStyle(
                        fontSize: 24,
                        fontWeight: FontWeight.bold,
                        color: Colors.grey.shade800,
                      ),
                    ),
                    Text(
                      'sarah.johnson@email.com',
                      style: TextStyle(
                        fontSize: 16,
                        color: Colors.grey.shade600,
                      ),
                    ),
                  ],
                ),
              ),
              SizedBox(height: 20),
              _buildProfileSection('Emergency Contacts', [
                _buildProfileItem(Icons.person, 'Mom - +1 234 567 8901'),
                _buildProfileItem(Icons.person, 'Dad - +1 234 567 8902'),
                _buildProfileItem(Icons.person, 'Sister - +1 234 567 8903'),
              ]),
              SizedBox(height: 20),
              _buildProfileSection('Safety Settings', [
                _buildProfileItem(Icons.notifications, 'Emergency Alerts - ON'),
                _buildProfileItem(Icons.mic, 'Voice Detection - ON'),
                _buildProfileItem(Icons.location_on, 'Location Sharing - ON'),
                _buildProfileItem(Icons.volume_up, 'Sound Alerts - ON'),
              ]),
              SizedBox(height: 20),
              _buildProfileSection('App Settings', [
                _buildProfileItem(Icons.dark_mode, 'Dark Mode'),
                _buildProfileItem(Icons.language, 'Language - English'),
                _buildProfileItem(Icons.help, 'Help & Support'),
                _buildProfileItem(Icons.info, 'About SafeGuard'),
              ]),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildProfileSection(String title, List<Widget> items) {
    return Container(
      width: double.infinity,
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(15),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 10,
            offset: Offset(0, 5),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Padding(
            padding: EdgeInsets.all(20),
            child: Text(
              title,
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
                color: Colors.grey.shade800,
              ),
            ),
          ),
          ...items,
        ],
      ),
    );
  }

  Widget _buildProfileItem(IconData icon, String text) {
    return Container(
      padding: EdgeInsets.symmetric(horizontal: 20, vertical: 15),
      decoration: BoxDecoration(
        border: Border(
          top: BorderSide(color: Colors.grey.shade200),
        ),
      ),
      child: Row(
        children: [
          Icon(icon, color: Colors.grey.shade600, size: 24),
          SizedBox(width: 15),
          Expanded(
            child: Text(
              text,
              style: TextStyle(
                fontSize: 16,
                color: Colors.grey.shade700,
              ),
            ),
          ),
          Icon(Icons.arrow_forward_ios, color: Colors.grey.shade400, size: 16),
        ],
      ),
    );
  }
}

// Additional utility classes and services would go here

class LocationService {
  static Future<Position> getCurrentLocation() async {
    bool serviceEnabled = await Geolocator.isLocationServiceEnabled();
    if (!serviceEnabled) {
      throw Exception('Location services are disabled.');
    }

    LocationPermission permission = await Geolocator.checkPermission();
    if (permission == LocationPermission.denied) {
      permission = await Geolocator.requestPermission();
      if (permission == LocationPermission.denied) {
        throw Exception('Location permissions are denied');
      }
    }

    if (permission == LocationPermission.deniedForever) {
      throw Exception('Location permissions are permanently denied');
    }

    return await Geolocator.getCurrentPosition();
  }
}

class NotificationService {
  static void showNotification(String title, String body) {
    // Implementation for local notifications
    print('Notification: $title - $body');
  }
}

class EmergencyContact {
  String name;
  String phone;
  String relation;

  EmergencyContact({
    required this.name,
    required this.phone,
    required this.relation,
  });
}

class SafetyPreferences {
  bool voiceDetectionEnabled;
  bool locationSharingEnabled;
  bool emergencyAlertsEnabled;
  bool soundAlertsEnabled;
  List<String> customHotwords;

  SafetyPreferences({
    this.voiceDetectionEnabled = true,
    this.locationSharingEnabled = true,
    this.emergencyAlertsEnabled = true,
    this.soundAlertsEnabled = true,
    this.customHotwords = const ['help', 'emergency', 'danger', 'sos'],
  });
}